{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "LIT",
  "scopeName": "source.lit",
  "patterns": [{ "include": "#expression" }],
  "repository": {
    "expression": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#expressions" },
        { "include": "#keywords" },
        { "include": "#operators" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#callables" },
        { "include": "#identifiers" }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.lit",
          "match": "\\b(if|else|elsif|do|then|while|until|loop|return|match|break|and|or)\\b"
        },
        {
          "name": "keyword.other.lit",
          "match": "\\b(fn|struct|type|new|try)\\b"
        },
        {
          "name": "variable.language.closure-parameter.lit",
          "match": "\\b(it|its)\\b"
        },
        {
          "name": "constant.language.null.lit",
          "match": "\\b(nil)\\b"
        },
        {
          "name": "constant.language.boolean.lit",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "support.function.builtin.lit",
          "match": "\\b(println|print|readln|read)\\b"
        },
        {
          "name": "variable.language.this.lit",
          "match": "\\b(self)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.lit",
          "match": "<=|>=|==|!=|<|>"
        },
        {
          "match": "(%|\\*|\\+|-|/)",
          "name": "keyword.operator.arithmetic.lit"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.lit"
        },
        {
          "match": ";",
          "name": "punctuation.separator.statement.lit"
        },
        {
          "match": ",",
          "name": "punctuation.separator.object.lit"
        }
      ]
    },
    "strings": {
      "patterns": [
        { "include": "#double-quoted-strings-interpolated" },
        { "include": "#single-quoted-strings" },
        { "include": "#double-quoted-strings" }
      ]
    },
    "single-quoted-strings": {
      "name": "string.quoted.single.lit",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.lit",
          "match": "\\\\."
        }
      ]
    },
    "double-quoted-strings": {
      "name": "string.quoted.double.lit",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.lit",
          "match": "\\\\."
        },
        { "include": "#escaped_char" }
      ]
    },
    "double-quoted-strings-interpolated": {
      "name": "string.quoted.double.interpolated.lit",
      "begin": "\"",
      "end": "\"",
      "patterns": [{ "include": "#interpolated-lit" }, { "include": "#escaped_char" }]
    },
    "interpolated-lit": {
      "patterns": [
        {
          "begin": "{",
          "contentName": "source.lit",
          "end": "}",
          "name": "meta.embedded.line.lit",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "#=",
          "end": "=#",
          "name": "comment.block.lit",
          "patterns": [{ "include": "#comments" }]
        },
        {
          "match": "#.*",
          "name": "comment.line.number-sign.lit"
        }
      ]
    },
    "numbers": {
      "name": "constant.numeric.lit",
      "match": "\\b[0-9]+(?:.[0-9]+)?\\b"
    },
    "callables": {
      "patterns": [
        {
          "name": "entity.name.function.lit",
          "match": "([A-Za-z_][A-Za-z0-9_?!]*)\\s*\\("
        },
        {
          "match": "\\.([A-Za-z_][A-Za-z0-9_?!]*)\\s*\\{",
          "captures": {
            "1": {
              "name": "entity.name.function.lit"
            }
          }
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "match": "\\b([A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.lit"
            }
          }
        },
        {
          "name": "variable.other.readwrite.lit",
          "match": "[A-Za-z_][A-Za-z0-9_?!]*"
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "match": "\\b(let)\\s+([A-Za-z_][A-Za-z0-9_!?]*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.lit"
            },
            "2": {
              "patterns": [
                {
                  "match": "\\b([A-Z][A-Za-z0-9_]*)\\b",
                  "captures": {
                    "1": {
                      "name": "entity.name.type.lit"
                    }
                  }
                },
                { "name": "support.variable.lit" }
              ]
            }
          }
        },
        {
          "match": "\\b(module)\\s+([A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.module.lit"
            },
            "2": {
              "name": "entity.name.type.module.lit"
            }
          }
        },
        {
          "match": "\\b(struct)\\s+([A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.struct.lit"
            },
            "2": {
              "name": "entity.name.type.struct.lit"
            }
          }
        },
        {
          "match": "\\b(enum)\\s+([A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.enum.lit"
            },
            "2": {
              "name": "entity.name.type.enum.lit"
            }
          }
        },
        {
          "match": "\\b(type)\\s+(([A-Z][A-Za-z0-9_]*)(\\s*,\\s*[A-Z][A-Za-z0-9_]*)*|\\*?)",
          "captures": {
            "1": {
              "name": "keyword.other.lit"
            },
            "2": {
              "name": "entity.name.type.lit"
            },
            "3": {
              "patterns": [
                {
                  "match": "\\b[A-Z][A-Za-z0-9_]*\\b",
                  "name": "entity.name.type.lit"
                }
              ]
            }
          }
        },
        {
          "match": "\\b(fn)\\s+([A-Za-z_][A-Za-z0-9_!?]*)\\s*\\{\\s*(\\|?\\s*[A-Za-z_][A-Za-z0-9_!?,\\s]*)*\\|?",
          "captures": {
            "1": {
              "name": "storage.type.function.lit"
            },
            "2": {
              "name": "entity.name.function.lit"
            },
            "3": {
              "patterns": [
                {
                  "match": "[A-Za-z_][A-Za-z0-9_!?]*",
                  "name": "variable.parameter.lit"
                }
              ]
            }
          }
        }
      ]
    },
    "escaped_char": {
      "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
      "name": "constant.character.escape.lit"
    }
  }
}
