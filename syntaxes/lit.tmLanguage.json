{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "LIT",
  "scopeName": "source.lit",
  "firstLineMatch": "^#!/.*\blit\b",
  "patterns": [{ "include": "#expression" }],
  "repository": {
    "expression": {
      "patterns": [
        { "include": "#keywords" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#comments" },
        { "include": "#callables" },
        { "include": "#identifiers" }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.lit",
          "match": "\\b(if|else|while|loop|return|match|break|and|or)\\b"
        },
        {
          "name": "constant.language.null.lit",
          "match": "\\b(nil)\\b"
        },
        {
          "name": "constant.language.boolean.lit",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "support.function.builtin.lit",
          "match": "\\b(puts|print)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        { "include": "#single-quoted-strings" },
        { "include": "#double-quoted-strings" }
      ]
    },
    "single-quoted-strings": {
      "name": "string.quoted.single.lit",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.lit",
          "match": "\\\\."
        }
      ]
    },
    "double-quoted-strings": {
      "name": "string.quoted.double.lit",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.lit",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "#=",
          "end": "=#",
          "name": "comment.block.lit"
        },
        {
          "match": "#.*",
          "name": "comment.line.number-sign.lit"
        }
      ]
    },
    "numbers": {
      "name": "constant.numeric.lit",
      "match": "\\b[0-9]+(?:.[0-9]+)?\\b"
    },
    "callables": {
      "match": "([A-Za-z_][A-Za-z0-9_?!]*)\\(",
      "name": "entity.name.function.lit"
    },
    "identifiers": {
      "name": "variable.other.readwrite.lit",
      "match": "[A-Za-z_][A-Za-z0-9_?!]*"
    }
  }
}
